
### How to dirtily make a byte slice (without zeroing its byte elements)?

Prior to Go 1.21, there is no way to achieve this, even if with unsafe ways.

Since Go 1.21, the implmentation of `strings.Builder.Grow` calls an
internal `bytealg.MakeNoZero` function instead of the built-in `make`
function the old implementation called.
For most cases, the built-in `make` function will zero the elements
of the result slice, so it is often comparatively slower.

With the 1.21+ implementation, now we get a chance to create byte slices without
initializing their elements to zero (though achieving this functionality
requires the use of  `unsafe` functions).

'''Go
import (
	"strings"
	"unsafe"
)

func MakeDirtyByteSlice(n int) []byte {
	var b strings.Builder
	b.Grow(n)
	var p = unsafe.StringData(b.String())
	return unsafe.Slice(p, n)
}
'''
