
### How to iterate byte elements in a string?

In Go, strings are assumed as UTF-8 encoded.
`for-range` over a string will get the runes (Unicode code points) in the string.
Then how to get the byte elements in a string?
There are two ways to achieve this.
The performance of these two ways is substantially equivalent.

##======= Way 1: use `for;;` loop

'''Go
	for i := 0; i < len(aString); i++ {
		byteElement := aString[i]
		... // use byteElement
	}
'''

##======= Way 2: use `for-range` loop

Gince Go toolchain 1.7, the official Go compiler makes an optimization
so that memory allocation and bytes duplication are not needed in
the conversion `[]byte(aString)` following the `range` keyword.

'''Go
	for _, byteElement := range []byte(aString) {
		... // use byteElement
	}
'''



